{"version":3,"sources":["src/main.js"],"names":["WIDTH","window","innerWidth","HEIGHT","innerHeight","VIEW_ANGLE","ASPECT","NEAR","FAR","scene","THREE","Scene","camera","PerspectiveCamera","canvas","document","getElementById","renderer","WebGLRenderer","alpha","convertRange","value","r1","r2","position","z","add","setSize","light","PointLight","set","centerLat","centerLong","uri","key","dataPromise","getData","mappaOptions","lat","lng","zoom","pitch","style","mappa","myMap","data","polygons","Mappa","tileMap","overlay","onChange","update","console","log","controlsAdded","addControls","map","addControl","mapboxgl","NavigationControl","addEventListener","flyTo","center","Math","random","rotateTo","meshPromise","createMeshes","animate","updateMeshes","requestAnimationFrame","render","options","headers","axios","get","catch","error","meshes","material","MeshBasicMaterial","color","side","then","response","i","radius","height","geometry","CylinderGeometry","mesh","Mesh","appData","push","mappaMap","pos","latLngToPixel","latitude","longitude","vector","Vector3","x","y","unproject","dir","sub","normalize","distance","newPos","clone","multiplyScalar"],"mappings":"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","file":"main.map","sourceRoot":"../src","sourcesContent":["// // Scene Configurations\nconst WIDTH = window.innerWidth;\nconst HEIGHT = window.innerHeight;\nconst VIEW_ANGLE = 45;\nconst ASPECT = WIDTH / HEIGHT;\nconst NEAR = 0.1;\nconst FAR = 10000;\n\n// Scene, camera, canvas, renderer\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);\nconst canvas = document.getElementById(\"canvas\");\nconst renderer = new THREE.WebGLRenderer({ alpha: true, canvas: canvas });\n\n// Convert range function\nconst convertRange = (value, r1, r2) => {\n  return (value - r1[0]) * (r2[1] - r2[0]) / (r1[1] - r1[0]) + r2[0];\n};\n\ncamera.position.z = 300;\nscene.add(camera);\nrenderer.setSize(WIDTH, HEIGHT);\n\n// Light\nconst light = new THREE.PointLight(0xffffff, 1.2);\nlight.position.set(0, 0, 6);\nscene.add(light);\n\n\n\n\n\n\n\n// API Key for Mapboxgl. Get one here:\n// https://www.mapbox.com/studio/account/tokens/\n\n\nconst centerLat = 47.5964863;\nconst centerLong = -122.3303769;\nlet uri = `https://data.seattle.gov/resource/k44w-2dcq.json?$where=within_circle(location_2, ${centerLat}, ${centerLong}, 1609.34)`;\nconst key = 'pk.eyJ1IjoibGFuY2UxM2MiLCJhIjoiY2ptZmdyemN0Nm1xODN3bGlrb2FpY2F3ayJ9.ZEzkKAoyRhZMWe0z5tBqaw'\nlet dataPromise = getData(uri);\n\nconst mappaOptions = {\n  lat: 47.5964863,\n  lng: -122.3303769,\n  zoom: 10,\n  pitch: 50,\n  style: \"mapbox://styles/mapbox/dark-v9\"\n}\n\nlet mappa;\nlet myMap;\nlet data;\nlet polygons;\n\n\n  // Store all Polygons features in an array called polygons.\n  mappa = new Mappa('MapboxGL', key);\n  myMap = mappa.tileMap(mappaOptions);\n\n  myMap.overlay(canvas);\n  myMap.onChange(update);\n\n  // https://www.mapbox.com/mapbox-gl-js/example/geojson-polygon/\n  // TEST\n  console.log(myMap);\n\n\nlet controlsAdded = false;\nfunction addControls() {\n  if (controlsAdded === false) {\n    myMap.map.addControl(new mapboxgl.NavigationControl());\n\n    // Fly\n    document.getElementById('fly').addEventListener('click', function () {\n      // Fly to a random location by offsetting the point -74.50, 40\n      // by up to 5 degrees.\n      myMap.map.flyTo({\n          center: [\n              centerLong + (Math.random() * 0.01),\n              centerLat  + (Math.random() * 0.01)\n            ]\n      });\n\n      myMap.map.rotateTo(Math.random() * 10);\n    });\n  }\n\n    \n\n  controlsAdded = true;\n}\n\n\nlet meshPromise = createMeshes(dataPromise);\nfunction update() {\n  addControls();\n}\n\n\n// Animate loop\nconst animate = () => {\n\n  updateMeshes(meshPromise, myMap, scene);\n\n  requestAnimationFrame(animate);\n  renderer.render(scene, camera);\n};\n\nanimate();\n\n\n\n\nasync function getData(uri) {\n  let options = {\n    headers: {\n      \"X-App-Token\": \"Fw92XRaGzqhGLVWlR6ANSnmQX\"\n    }\n  }\n  \n  return await axios.get(uri, options)\n    .catch(function (error) {\n      console.log(error);\n    });\n}\n\n\nasync function createMeshes(dataPromise) {\n\n  let meshes = [];\n  const material = new THREE.MeshBasicMaterial({ color: 0xff0000, side: 2});\n\n  await dataPromise.then((response) => {\n    for (let i = 0; i < 100; i++) {// (let entry of response.data) {\n      const radius = 0.2;\n      const height = 10;\n      const geometry = new THREE.CylinderGeometry(radius, radius, height, 32);\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.appData = response.data[i];\n      meshes.push(mesh);\n    }\n  });\n\n\n  return meshes;\n}\n\nfunction updateMeshes(meshPromise, mappaMap, scene) {\n  meshPromise.then((meshes) => {\n    for (let mesh of meshes) {\n      const pos = mappaMap.latLngToPixel(mesh.appData.latitude, mesh.appData.longitude);\n      const vector = new THREE.Vector3();\n      vector.set((pos.x / WIDTH) * 2 - 1, -(pos.y / HEIGHT) * 2 + 1, 0.5);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n      const newPos = camera.position.clone().add(dir.multiplyScalar(distance));\n\n      mesh.position.set(newPos.x, newPos.y, newPos.z);\n      scene.add(mesh);\n    }\n  });\n}\n\n//updateMeshes(meshPromise, myMap, scene);\n\n// meshPromise.then((meshes) => {\n//   console.log(\"meshes\");\n//   console.log(meshes);\n// });\n\n\n"]}